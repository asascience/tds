if (name != "thredds-data-server") {
    throw new GradleException("This script plugin should only be applied to the root project, not '$name'.")
}

apply plugin: 'maven-publish'

apply plugin: "net.linguica.maven-settings"

apply from: "$rootDir/gradle/any/properties.gradle"  // For Nexus credential properties.

import edu.ucar.build.publishing.PublishingUtil
import org.gradle.api.internal.artifacts.publish.ArchivePublishArtifact

publishing {
    publications {
        // Publish all artifacts we've added to the "archives" configuration of the root project. See fatJars.gradle.
        rootProject.configurations.archives.allArtifacts.each {
            if (it instanceof ArchivePublishArtifact) {
                AbstractArchiveTask task = (it as ArchivePublishArtifact).archiveTask

                "$task.baseName"(MavenPublication) {
                    artifactId task.baseName
                    artifact task
                }
            }
        }

        tdsBom(MavenPublication) {  // Maven BOM publication
            artifactId 'thredds-data-server-bom'

            pom.withXml{
                List<Project> publishedProjects = allprojects*.findAll { it.plugins.withType(MavenPublishPlugin) }
                List<MavenPublication> allPubs = publishedProjects.publishing.publications.flatten()

                // Don't include tdsBom (and related), legacy, or any of the fatJar
                // pubs in dependencyManagement.
                def ignoreThesePubNames = ["d4ts",
                                           "tdmFat",
                                           "tdsBom"]

                List<MavenPublication> pubsToUseForBom = allPubs.findAll {
                    !ignoreThesePubNames.contains(it.name)
                }

                asNode().append PublishingUtil.createDependencyManagement(pubsToUseForBom)
            }
        }

        mavenWar(MavenPublication) {
            artifactId 'thredds-data-server'
            artifact(file('tds/build/libs/tds-5.0.0-beta8-RPS_b001.war'))
        }
    }
}

// The "publish" tasks require credentials for our Nexus server, which they look for in Gradle properties.
// If those properties (i.e. NEXUS_USERNAME_KEY and NEXUS_PASSWORD_KEY) haven't been provided, the build will fail.
// Therefore, we only want to configure credentials when a "publish" task is part of the execution plan. Otherwise,
// unavailable credentials could cause a build to fail even if we aren't doing any publishing. The TaskExecutionGraph
// allows us to do that.
// gradle.taskGraph.whenReady { TaskExecutionGraph taskGraph ->
//     // This won't find any publishToMavenLocal tasks. Those are of type PublishToMavenLocal
//     Collection<Task> mavenPublishTasks = taskGraph.allTasks.findAll { it instanceof PublishToMavenRepository }

//     mavenPublishTasks.each {
//         it.repository.credentials.with {
//             username = getPropertyOrFailBuild NEXUS_USERNAME_KEY
//             password = getPropertyOrFailBuild NEXUS_PASSWORD_KEY
//         }
//     }
// }
