plugins {
  id 'base'
  id 'edu.ucar.unidata.site.jekyll'
}

// disable tasks added by the jekyll plugin...we need custom tasks, one for each docset
buildJekyllSite.enabled(false)
serveJekyllSite.enabled(false)

apply from: "${rootDir}/gradle/any/properties.gradle"
apply from: "${projectDir}/helpers.gradle"

import edu.ucar.build.publishing.tasks.PublishToRawRepoTask
import edu.ucar.build.publishing.tasks.DeleteFromNexusTask
import edu.ucar.unidata.site.jekyll.tasks.ServeTask

////////////////////////
// Jekyll Sites Build //
////////////////////////

final def docsets = ['adminguide', 'devguide', 'quickstart', 'userguide']
final def rawRepoName = 'docs-tds'
final def buildAllJekyllSitesTaskName = 'buildAllJekyllSites'

// copy shared files
def filesToCopy = copySpec {
  from "${projectDir}/shared"
  include '**/*.golden'
  rename '(.*).golden', '$1'
}

def copySharedJekyllFilesTask = tasks.register('copySharedJekyllFiles', Copy) {
  group = 'documentation-set'
  into "${projectDir}"
  docsets.each { docset ->
    into("${docset}") {
      with filesToCopy
    }
  }
}

// clean up shared files files that were copied during the jekyll site build tasks
clean {
  def tree = fileTree("${projectDir}/shared")
  tree.include('**/*.golden')
  tree.forEach {
    def relFileToDelete = projectDir.toPath().resolve('shared').relativize(it.toPath())
    docsets.each { docset ->
      def fileToDelete = file("${projectDir}/${docset}").toPath().resolve(relFileToDelete)
      fileToDelete = fileToDelete.toString().replaceAll("\\.golden\$", "")
      delete fileToDelete
    }
  }
}

// aggregator task (aggregate individual doc set builds)
tasks.register(buildAllJekyllSitesTaskName) {
  group = 'Documentation'
  description = 'Build all jekyll sites.'
}

// setup build and publish tasks associated with each individual documentation set
docsets.each { docset ->
  def partialTaskName = makeUpperCamelCase(docset)
  def buildTask = tasks.register("build${partialTaskName}", edu.ucar.unidata.site.jekyll.tasks.BuildTask) {
    group 'documentation-set'
    script = 'jekyll'
    description "Build ${docset} jekyll site."
    sourceDirectory.set(layout.projectDirectory.dir("${docset}/src/site"))
    destinationDirectory.set(layout.buildDirectory.dir("site/${docset}/"))
    dependsOn tasks.named('unpackGemJar'), copySharedJekyllFilesTask
  }

  tasks.register("serve${partialTaskName}", ServeTask) {
    group 'documentation-set'
    script = 'jekyll'
    description "Serve $docset jekyll site."
    sourceDirectory.set(layout.projectDirectory.dir("${docset}/src/site"))
    destinationDirectory.set(layout.buildDirectory.dir("site/${docset}/"))
    dependsOn tasks.named('unpackGemJar')
  }

  // register tasks with the aggregator build task
  tasks.named(buildAllJekyllSitesTaskName).configure({dependsOn buildTask})
}

/////////////////////////////////////////////
// Nexus Repository Publication Management //
/////////////////////////////////////////////

// versioned means published documentation url path will include explicit /major.minor/ versioning information
// current means versioning information will be "meta" -  most of the time /current/, or if on the develop branch /dev/
final def docVersionTypes = ['current', 'versioned']

// create aggregation level publication/deletion tasks (versioned or current)
// for all documentation
docVersionTypes.forEach {docVersionType ->
  tasks.register(getPublishAllTaskName('all', docVersionType)) {
    group = 'Publishing'
    description = "Publish all documentation (${docVersionType})."
  }
  tasks.register(getDeleteAllTaskName('all', docVersionType)) {
    group = 'Publishing'
    description = "Remove all ${docVersionType} docs on Nexus."
  }
}

//
// Publish Jekyll Docsets
//
// create aggregation level publication/deletion tasks (versioned or current)
// for jekyll documentation
docVersionTypes.forEach {docVersionType ->
  tasks.register(getPublishAllTaskName('jekyll', docVersionType)) {
    group = 'Publishing'
    description = "Publish all ${docVersionType} Jekyll Sites to Nexus."
  }

  tasks.register(getDeleteAllTaskName('jekyll', docVersionType)) {
    group = 'Publishing'
    description = "Remove all ${docVersionType} Jekyll Sites from Nexus."
  }
}

docVersionTypes.each {docVersionType ->
  tasks.named(getPublishAllTaskName('jekyll', docVersionType)).configure({dependsOn tasks.named(buildAllJekyllSitesTaskName)})
}

docsets.each { docset ->
  docVersionTypes.each { docType ->
    def nexusTaskName = makeNexusTaskName(docType, docset)
    def nexusVersion = docType != 'current' ? "${project.docVersion}" : 'current'
    def nexusPath = "${nexusVersion}/${docset}"

    def pubAsTask = tasks.register("publishAs${nexusTaskName}", PublishToRawRepoTask) {
      description  "Publish ${docset} to Nexus under ${nexusPath}/."
      group 'Publishing-docset'
      dependsOn tasks.named("build${ -> makeUpperCamelCase(docset) }")
      repoName = "${rawRepoName}"
      publishSrc = file("${buildDir}/site/${docset}/")
      destPath "${nexusPath}/"
    }

    def deleteTask = tasks.register("delete${nexusTaskName}", DeleteFromNexusTask) {
      description "Remove $docset on Nexus under ${nexusPath}/*."
      group 'Publishing-docset'
      searchQueryParameters.repository = "${rawRepoName}"
      searchQueryParameters.name = "${nexusPath}/*"
    }

    // register tasks with the appropriate aggregator tasks
    tasks.named(getPublishAllTaskName('jekyll', docType)).configure({dependsOn pubAsTask})
    tasks.named(getDeleteAllTaskName('jekyll', docType)).configure({dependsOn deleteTask})
  }
}

// create aggregation level publication/deletion tasks (versioned or current)
// for all documentation (jekyll sites and javadocs)
docVersionTypes.forEach { docVersionType ->

  tasks.named(getPublishAllTaskName('all', docVersionType)).configure {
    dependsOn tasks.named(getPublishAllTaskName('jekyll', docVersionType))
  }
  tasks.named(getDeleteAllTaskName('all', docVersionType)).configure {
    dependsOn tasks.named(getDeleteAllTaskName('jekyll', docVersionType))
  }
}

//
// Common to all publish related tasks
//
gradle.projectsEvaluated {
  for (taskType in [PublishToRawRepoTask, DeleteFromNexusTask]) {
    tasks.withType(taskType).all {
      host = 'https://artifacts.unidata.ucar.edu/'
      if (taskType == DeleteFromNexusTask && project.hasProperty('dryRun')) {
        dryRun = project.property('dryRun')
      }
      onlyIf {
        // Will be evaluated at task execution time, not during configuration.
        // Fails the build if the specified properties haven't been provided.
        username = getPropertyOrFailBuild NEXUS_USERNAME_KEY
        password = getPropertyOrFailBuild NEXUS_PASSWORD_KEY
        return true
      }
    }
  }
}

build.dependsOn buildAllJekyllSites
